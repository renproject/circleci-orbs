version: 2.1

description: |
  Core commands that are shared among different repositories.
  https://github.com/renproject/circleci-orbs

commands:
  rw_checkout:
    description: |
      Clone the repository with Read/Write privileges.

        * check that $GITHUB_TOKEN environment variable is set
    parameters:
      branch:
        description: The name of the branch to be merged. Defaults to $CIRCLE_BRANCH
        type: string
        default: $CIRCLE_BRANCH
    steps:
      - run:
          name: Check Environment Variables
          command: |
            if [[ -z "${GITHUB_TOKEN}" ]]; then
              echo "GITHUB_TOKEN is not set, will not be able to push merge."
              exit 1
            fi
      - run:
          name: Clone Git Repository
          command: |
            WORKING_DIR=$(eval echo ${CIRCLE_WORKING_DIRECTORY})
            RW_REPO_URL="https://${GITHUB_TOKEN}@github.com/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}"

            if [ -e ${WORKING_DIR}/.git ]
            then
              cd ${WORKING_DIR}
              git remote set-url origin "${RW_REPO_URL}" || true
              git fetch --force origin "<< parameters.branch >>:remotes/origin/<< parameters.branch >>"
            else
              mkdir -p ${WORKING_DIR}
              cd ${WORKING_DIR}
              git clone --branch << parameters.branch >> ${RW_REPO_URL} .
            fi
            git fetch --all
  merge:
    description: Merge from branch into another branch
    parameters:
      from:
        description: The branch with changes to be merged into another branch
        type: string
      into:
        description: The branch onto which changes will be applied
        type: string
    steps:
      - rw_checkout:
          branch: << parameters.into >>
      - run:
          name: Merging branch
          command: |
            git merge origin/<< parameters.from >> -v
            git push
  install_dep:
    description: Installs go dep
    parameters:
      path:
        description: The location to install dep to
        type: string
        default: /usr/local/bin
    steps:
      - run:
          name: Installing dep
          command: |
            if ! [ -x "$(command -v dep)" ]; then
                export INSTALL_DIRECTORY=.
                curl https://raw.githubusercontent.com/golang/dep/master/install.sh | sh
                sudo mv ./dep << parameters.path >>
            fi
  install_ghr:
    description: Installs ghr (Github Release) tool
    parameters:
      path:
        description: The location to install dep to
        type: string
        default: /usr/local/bin
      version:
        description: The version of ghr to install
        type: string
        default: v0.12.0
    steps:
      - run:
          name: Installing ghr
          command: |
            if ! [ -x "$(command -v ghr)" ]; then
                curl -L -s https://github.com/tcnksm/ghr/releases/download/<< parameters.version >>/ghr_<< parameters.version >>_linux_amd64.tar.gz -o ./ghr.tar.gz
                tar xvzf ./ghr.tar.gz
                sudo mv ./ghr_<< parameters.version >>_linux_amd64/ghr << parameters.path >>
            fi
  github_release:
    description: Makes a Github release
    parameters:
      tag:
        description: The tag that the release should have
        type: string
      filelist:
        description: The file containing list of filenames to release
        type: string
      prerelease:
        description: Whether the release should be a prerelease or not
        type: boolean
        default: false
    steps:
      - run:
          name: Check Environment Variables
          command: |
            if [[ -z "${GITHUB_TOKEN}" ]]; then
              echo "GITHUB_TOKEN is not set, will not be able to push merge."
              exit 1
            fi
      - run:
          name: Creating Github Release
          command: |
            tmpdir=$(mktemp -d)
            cat << parameters.filelist >> | xargs -I '{}' cp '{}' ${tmpdir}
            ghr <<# parameters.prerelease >>--prerelease <</ parameters.prerelease >><< parameters.tag >> ${tmpdir}
            rm -rf ${tmpdir}


jobs:
  merge_nightly:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - merge:
          from: master
          into: nightly
  merge_beta:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - merge:
          from: nightly
          into: beta
  merge_stable:
    parameters:
      executor:
        type: executor
    executor: << parameters.executor >>
    steps:
      - merge:
          from: beta
          into: stable
